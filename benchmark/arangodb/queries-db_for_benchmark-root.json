[{"value":"let rp_filtered_keys =(\nfor rp in Relational_Person   \n\tfilter rp.credit_score>=500 && rp.credit_score<550 && rp.wallet_balances>=10000 && rp.wallet_balances<15000  \n\treturn rp._key)\n\t\nlet dp_filtered_keys=(\nfor adv in Doc_Adv \n    let satisfied_budget_list = adv.CampaignList[*].c_budget[** filter CURRENT >= 10000 && CURRENT < 15000]\n    filter length(satisfied_budget_list)>0\n    let word_list = adv.CampaignList[*].WordSetList[*].WordList[*][***].wo_word\n    filter position(word_list,\"secular\")\n    return adv.CampaignList[*].ClickList[*].PersonClickList[*][***].p_id\n    )[**]\nlet re_doc_filtered_person_vertices = (\nfor person in Person\n    filter position(rp_filtered_keys,person._key) && position(dp_filtered_keys,to_number(person._key))\n    return person\n    )\nlet tag_filtered_person_vertices=(\nfor person_vertex in re_doc_filtered_person_vertices\n\tfor vertex,edge,path \n\t    in 1..3 outbound person_vertex\n\t    likes,hasType,hasTag\n\t    filter STARTS_WITH(path.vertices[3]._id,\"TagClass\") && path.vertices[3].name==\"Person\"\n\t    return person_vertex)\n\t    \nfor person_vertex in tag_filtered_person_vertices\n\t    for vertex,edge,path \n\t    in 1..10 outbound person_vertex\n\t    studyAt,isPartOf,isLocatedIn\n\t    filter(length(path.vertices[* filter STARTS_WITH(CURRENT._id,\"Place\") && CURRENT.name==\"China\" ])>0)\n\t    return person_vertex\n\n","parameter":{},"name":"q1"},{"value":"let rp_filtered_keys =(\nfor rp in Relational_Person   \n\tfilter rp.credit_score>=500 && rp.credit_score<550 && rp.wallet_balances>=10000 && rp.wallet_balances<15000  && rp.first_name == \"Rodrigo\"\n\treturn rp._key)\n\nlet dp_filtered_keys=(\nfor adv in Doc_Adv \n    let word_list = adv.CampaignList[*].WordSetList[*].WordList[*][***].wo_word\n    filter position(word_list,\"secular\")\n    return adv.CampaignList[*].ClickList[*].PersonClickList[*][***].p_id\n    )[**]\nlet re_doc_filtered_person_vertices = (\nfor gp in Person\n    filter position(rp_filtered_keys,gp._key) && position(dp_filtered_keys,to_number(gp._key))\n    return gp\n    )\n//return re_doc_filtered_person_vertices\nfor person_vertex in re_doc_filtered_person_vertices\n\tfor vertex,edge,path \n\t    in 1..3 outbound person_vertex\n\t    likes,hasType,hasTag\n\t    filter path.vertices[3].name==\"Person\"\n\t    return person_vertex\n\n","parameter":{},"name":"q2"},{"value":"let rp_filtered_keys =(\nfor rp in Relational_Person   \n\tfilter rp.credit_score>=500 && rp.credit_score<550 \n\treturn rp._key)\n\t\nlet dp_filtered_keys=(\nfor adv in Doc_Adv \n     let satisfied_budget_list = (adv.CampaignList[*].c_budget)[* filter CURRENT >= 10000 && CURRENT < 15000]\n    filter length(satisfied_budget_list)>0\n    let word_list = adv.CampaignList[*].WordSetList[*].WordList[*][***].wo_word\n    filter position(word_list,\"secular\")\n    let satisfied_click_list = (adv.CampaignList[*].ClickList[*][**])[* filter CURRENT.cl_date >= \"2018-01-01 00:00:00\" && CURRENT.cl_date < \"2020-01-01 00:00:00\"]\n    return (satisfied_click_list[*].PersonClickList[*][**].p_id)\n    )[**] //int list\n\nlet re_doc_filtered_person_vertices = (\nfor gp in Person\n    filter position(rp_filtered_keys,gp._key) && position(dp_filtered_keys,to_number(gp._key))\n    return gp\n    )\nfor person_vertex in re_doc_filtered_person_vertices\n\tfor vertex,edge,path \n\t    in 1..10 outbound person_vertex\n\t    likes,hasType,hasTag\n\t    filter STARTS_WITH(path.vertices[3]._id,\"TagClass\") && path.vertices[3].name==\"Person\"\n\t    return person_vertex\n\n","parameter":{},"name":"q3"},{"value":"let rp_filtered_keys =(\nfor rp in Relational_Person   \n\tfilter rp.credit_score>=500 && rp.credit_score<550\n\treturn rp._key)\n\t\nlet dp_filtered_keys=(\nfor adv in Doc_Adv \n    let word_list = adv.CampaignList[*].WordSetList[*].WordList[*][***].wo_word\n    filter position(word_list,\"secular\")\n    return adv.CampaignList[*].ClickList[*].PersonClickList[*][***].p_id\n    )[**]\nlet re_doc_filtered_person_vertices = (\nfor person in Person\n    filter position(rp_filtered_keys,person._key) && position(dp_filtered_keys,to_number(person._key))\n    return person\n    )\n    \nlet tag_class_filtered_person_vertices_keys=(\nfor person_vertex in Person\n\tfor vertex,edge,path \n\t    in 1..2 outbound person_vertex\n\t    hasInterest,hasType\n\t    filter STARTS_WITH(path.vertices[2]._id,\"TagClass\") && path.vertices[2].name==\"Person\"\n\t    return person_vertex._key)//string\n\n\t \nlet graph_filterd_person_vertices1=(// company\nfor person_vertex in re_doc_filtered_person_vertices\n\tfor vertex,edge,path \n\t    in 1..1 outbound person_vertex\n\t    knows\n\t    filter position(tag_class_filtered_person_vertices_keys,path.vertices[1]._key)\n\t    return person_vertex\n)\n\nlet graph_filtered_person_vertice2=(\nfor person_vertex in graph_filterd_person_vertices1\n\tfor vertex,edge,path \n\t    in 1..3 outbound person_vertex\n\t    likes,hasType,hasTag\n\t    filter STARTS_WITH(path.vertices[3]._id,\"TagClass\") && path.vertices[3].name==\"Person\"\n\t    return person_vertex\n)\n\t    \nfor person_vertex in graph_filtered_person_vertice2\n\t    for vertex,edge,path \n\t    in 1..10 outbound person_vertex\n\t    studyAt,isPartOf,isLocatedIn\n\t    filter(length(path.vertices[* filter STARTS_WITH(CURRENT._id,\"Place\") && CURRENT.name==\"China\" ])>0)\n\t    limit 1\n\t    return person_vertex\n\n\n\n","parameter":{},"name":"q4"},{"value":"let rp_filtered_keys =(\nfor rp in Relational_Person   \n\tfilter rp.credit_score>=500 && rp.credit_score<550 && rp.wallet_balances>=10000 && rp.wallet_balances<15000  \n\treturn rp._key)\n\t\nlet dp_filtered_keys=(\nfor adv in Doc_Adv \n    let satisfied_budget_list = adv.CampaignList[*].c_budget[** filter CURRENT >= 10000 && CURRENT < 15000]\n    filter length(satisfied_budget_list)>0\n    let word_list = adv.CampaignList[*].WordSetList[*].WordList[*][***].wo_word\n    filter position(word_list,\"secular\")\n    return adv.CampaignList[*].ClickList[*].PersonClickList[*][***].p_id\n    )[**]\nlet re_doc_filtered_person_vertices = (\nfor person in Person\n    filter position(rp_filtered_keys,person._key) && position(dp_filtered_keys,to_number(person._key))\n    return person\n    )\nlet tag_filtered_person_vertices=(\nfor person_vertex in re_doc_filtered_person_vertices\n\tfor vertex,edge,path \n\t    in 1..3 outbound person_vertex\n\t    likes,hasType,hasTag\n\t    filter STARTS_WITH(path.vertices[3]._id,\"TagClass\") && path.vertices[3].name==\"Person\"\n\t    return person_vertex)\n\t    \nfor person_vertex in tag_filtered_person_vertices\n\t    for vertex,edge,path \n\t    in 1..10 outbound person_vertex\n\t    studyAt,isPartOf,isLocatedIn\n\t    filter(length(path.vertices[* filter STARTS_WITH(CURRENT._id,\"Place\") && CURRENT.name==\"China\" ])>0)\n\t    return person_vertex\n\n","parameter":{},"name":"q5"},{"value":"let rp_filtered_keys =(\nfor rp in Relational_Person   \n\tfilter rp.credit_score>=500 && rp.credit_score<550  && rp.wallet_balances>=10000 && rp.wallet_balances<15000  \n\treturn rp._key)\n\t\nlet re_filtered_person_vertices = (\nfor person in Person\n    filter position(rp_filtered_keys,person._key)\n    return person\n    )\n    \nlet graph_filtered_person_vertice1=(\nfor person_vertex in re_filtered_person_vertices\n\tfor vertex,edge,path \n\t    in 1..3 outbound person_vertex\n\t    likes,hasType,hasTag\n\t    filter STARTS_WITH(path.vertices[3]._id,\"TagClass\") && path.vertices[3].name==\"Person\"\n\t    return person_vertex\n)\n\t    \nfor person_vertex in graph_filtered_person_vertice1\n\t    for vertex,edge,path \n\t    in 1..10 outbound person_vertex\n\t    studyAt,isPartOf,isLocatedIn\n\t    filter(length(path.vertices[* filter STARTS_WITH(CURRENT._id,\"Place\") && CURRENT.name==\"China\" ])>0)\n\t    return person_vertex\n\n\n","parameter":{},"name":"q6"},{"value":"let dp_filtered_keys=(\nfor adv in Doc_Adv \n    let satisfied_budget_list = adv.CampaignList[*].c_budget[** filter CURRENT >= 10000 && CURRENT < 15000]\n    filter length(satisfied_budget_list)>0\n    let word_list = adv.CampaignList[*].WordSetList[*].WordList[*][***].wo_word\n    filter position(word_list,\"secular\")\n    return adv.CampaignList[*].ClickList[*].PersonClickList[*][***].p_id\n    )[**]\nlet doc_filtered_person_vertices = (\nfor person in Person\n    filter position(dp_filtered_keys,to_number(person._key))\n    return person\n    )\nlet tag_filtered_person_vertices=(\nfor person_vertex in doc_filtered_person_vertices\n\tfor vertex,edge,path \n\t    in 1..3 outbound person_vertex\n\t    likes,hasType,hasTag\n\t    filter STARTS_WITH(path.vertices[3]._id,\"TagClass\") && path.vertices[3].name==\"Person\"\n\t    return person_vertex)\n\t    \nfor person_vertex in tag_filtered_person_vertices\n\t    for vertex,edge,path \n\t    in 1..10 outbound person_vertex\n\t    studyAt,isPartOf,isLocatedIn\n\t    filter(length(path.vertices[* filter STARTS_WITH(CURRENT._id,\"Place\") && CURRENT.name==\"China\" ])>0)\n\t    return person_vertex\n\n","parameter":{},"name":"q7"},{"value":"let rp_filtered_keys =(\nfor rp in Relational_Person   \n\tfilter rp.credit_score>=300 && rp.credit_score<800 && rp.wallet_balances>=5000 && rp.wallet_balances<50000  \n\treturn rp._key)\n\t\nlet dp_filtered_keys=(\nfor adv in Doc_Adv \n    let satisfied_budget_list = adv.CampaignList[*].c_budget[** filter CURRENT >= 5000 && CURRENT < 25000]\n    filter length(satisfied_budget_list)>0\n    let word_list = adv.CampaignList[*].WordSetList[*].WordList[*][***].wo_word\n    filter position(word_list,\"secular\")\n    return adv.CampaignList[*].ClickList[*].PersonClickList[*][***].p_id\n    )[**]\nlet re_doc_filtered_person_vertices = (\nfor person in Person\n    filter position(rp_filtered_keys,person._key) && position(dp_filtered_keys,to_number(person._key))\n    return person\n    )\nlet tag_filtered_person_vertices=(\nfor person_vertex in re_doc_filtered_person_vertices\n\tfor vertex,edge,path \n\t    in 1..3 outbound person_vertex\n\t    likes,hasType,hasTag\n\t    filter STARTS_WITH(path.vertices[3]._id,\"TagClass\") && path.vertices[3].name==\"Person\"\n\t    return person_vertex)\n\t    \nfor person_vertex in tag_filtered_person_vertices\n\t    for vertex,edge,path \n\t    in 1..10 outbound person_vertex\n\t    studyAt,isPartOf,isLocatedIn\n\t    filter(length(path.vertices[* filter STARTS_WITH(CURRENT._id,\"Place\") && CURRENT.name==\"China\" ])>0)\n\t    return person_vertex\n\n","parameter":{},"name":"q8"},{"value":"\nfor adv in Doc_Adv \n    let satisfied_budget_list = adv.CampaignList[*].c_budget[** filter CURRENT >= 10000 && CURRENT < 15000]\n    filter length(satisfied_budget_list)>0\n    let word_list = adv.CampaignList[*].WordSetList[*].WordList[*][***].wo_word\n    filter position(word_list,\"secular\")\n    filter position(adv.CampaignList[*].ClickList[*].PersonClickList[*][***].p_id,17592186134210)\n    return adv\n\n\n\n","parameter":{},"name":"q10"},{"value":"let graph_filtered_person_vertice1=(\nfor person_vertex in Person\n\tfor vertex,edge,path \n\t    in 1..3 outbound person_vertex\n\t    likes,hasType,hasTag\n\t    filter STARTS_WITH(path.vertices[3]._id,\"TagClass\") && path.vertices[3].name==\"Person\"\n\t    return person_vertex\n)\n\nlet tag_class_filtered_person_vertices_keys=(\nfor person_vertex in graph_filtered_person_vertice1\n\tfor vertex,edge,path \n\t    in 1..2 outbound person_vertex\n\t    hasInterest,hasType\n\t    filter STARTS_WITH(path.vertices[2]._id,\"TagClass\") && path.vertices[2].name==\"Person\"\n\t    return person_vertex._key)//string\n\n\t \nlet graph_filterd_person_vertices2=(// company\nfor person_vertex in graph_filtered_person_vertice1\n\tfor vertex,edge,path \n\t    in 1..1 outbound person_vertex\n\t    knows\n\t    filter position(tag_class_filtered_person_vertices_keys,path.vertices[1]._key)\n\t    return person_vertex\n)\n\n\n\t    \nfor person_vertex in graph_filterd_person_vertices2\n\t    for vertex,edge,path \n\t    in 1..10 outbound person_vertex\n\t    studyAt,isPartOf,isLocatedIn\n\t    filter(length(path.vertices[* filter STARTS_WITH(CURRENT._id,\"Place\") && CURRENT.name==\"China\" ])>0)\n\t    limit 1\n\t    return person_vertex\n\n\n\n","parameter":{},"name":"q11"},{"value":"let rp_filtered_keys =(\nfor rp in Relational_Person   \n\tfilter rp.credit_score>=500 && rp.credit_score<550 && rp.wallet_balances>=10000 && rp.wallet_balances<15000  \n\treturn rp._key)\n\t\nlet dp_filtered_keys=(\nfor adv in Doc_Adv \n    let satisfied_click_list = (adv.CampaignList[*].ClickList[*][**])[* filter CURRENT.cl_date >= \"2018-01-01 00:00:00\" && CURRENT.cl_date < \"2020-01-01 00:00:00\"]\n    let satisfied_fee_list = (adv.CampaignList[*].ClickList[*][**])[* filter CURRENT.cl_fee >= 5000 && CURRENT.cl_fee < 8000]\n    return (satisfied_click_list[*].PersonClickList[*][**].p_id)\n    )[**] //int list\n\nlet re_doc_filtered_person_vertices = (\nfor gp in Person\n    filter position(rp_filtered_keys,gp._key) && position(dp_filtered_keys,to_number(gp._key))\n    return gp\n    )\nlet graph_filtered_vertices1=(    \nfor person_vertex in re_doc_filtered_person_vertices\n\tfor vertex,edge,path \n\t    in 1..1 outbound person_vertex\n\t    studyAt\n\t    filter path.vertices[1].name==\"Central_University_of_Karnataka\"\n\t    return person_vertex    \n\t    )\nfor person_vertex in graph_filtered_vertices1\n\tfor vertex,edge,path \n\t    in 1..2 outbound person_vertex\n\t    likes,hasTag\n\t    filter path.vertices[2].name==\"Time3\"\n\t    return person_vertex\n\n//Central_University_of_Karnataka","parameter":{},"name":"q9"}]